apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.service_name }}-{{ .Values.environment }}"
spec:
  selector:
    matchLabels:
      app: "{{ .Values.service_name }}-{{ .Values.environment }}"
  replicas: {{ .Values.replicas | default 1 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: "{{ .Values.service_name }}-{{ .Values.environment }}"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: "{{ .Values.service_name }}-{{ .Values.environment }}"
            topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 70
      containers:
      - name: "{{ .Values.service_name }}-{{ .Values.environment }}"
        image: 000000000000.dkr.ecr.region-code.amazonaws.com/{{ .Values.service_name }}-{{ .Values.environment }}:{{ .Values.image_tag }}
        securityContext:
          allowPrivilegeEscalation: false
        resources:
          requests:
            memory: {{ .Values.memory_limit | default "150Mi" }}
            cpu: {{ .Values.cpu_limit | default "20m" }}
          limits:
            memory: {{ .Values.memory_limit | default "150Mi" }}
        ports:
        - name: app-port
          containerPort: 80
        lifecycle: 
          preStop: 
            exec: 
              command: ["/bin/sh", "-c", "sleep 50"]
        livenessProbe:
          httpGet:
            port: app-port
            path: /health
          periodSeconds: 60
          initialDelaySeconds: 10
        readinessProbe:
          httpGet:
            port: app-port
            path: /health
          periodSeconds: 60
          initialDelaySeconds: 10
        env:
        {{- range $appsecretRef := .Values.appcrendentials }}
          - name: {{ $appsecretRef.secretKey }}
            valueFrom:
              secretKeyRef:
                key: {{ $appsecretRef.secretKey }}
                name: "{{ $.Values.service_name }}-secret-{{ $.Values.environment }}"
        {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.service_name }}-svc-{{ .Values.environment }}"
spec:
  selector:
    app: "{{ .Values.service_name }}-{{ .Values.environment }}"
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ .Values.service_name }}-ing-{{ .Values.environment }}"
  annotations:
    konghq.com/strip-path: 'true'
    konghq.com/headers.x-connection-identifier: {{ .Values.header_value }}
    konghq.com/headers.authorization: {{ .Values.authorization }}
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: kong
  tls:
  - secretName: connections-{{ .Values.environment }}-occasioapis-com
    hosts:
    - connections-{{ .Values.environment }}.occasioapis.com
  rules:   
  - host: "connections-{{ .Values.environment }}.occasioapis.com"
    http:
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            name: "{{ .Values.service_name }}-svc-{{ .Values.environment }}"
            port:
              number: 80
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: "{{ .Values.service_name }}-secret-{{ .Values.environment }}"
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: cluster-secret-store-engine #The secret store name we have just created.
    kind: ClusterSecretStore
  target:
    name: "{{ .Values.service_name }}-secret-{{ .Values.environment }}" # Secret name in k8s
  data:
    {{- range $appsecretRef := .Values.appcrendentials }}
    - secretKey: {{ $appsecretRef.secretKey }} 
      remoteRef:
        key: "{{ $.Values.environment }}/{{ $.Values.service_name }}/creds"
        property: {{ $appsecretRef.secretKey }}
    {{- end }}
---
{{ if eq .Values.environment "prod" }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: "{{ .Values.service_name }}-hpa-{{ .Values.environment }}"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: "{{ .Values.service_name }}-{{ .Values.environment }}"
  minReplicas: 1
  maxReplicas: 2
  metrics: 
  - type: Resource
    resource:
      name: memory 
      target:
        type: Utilization
        averageUtilization: 90 
  - type: Resource
    resource:
      name: cpu 
      target:
        type: Utilization
        averageUtilization: 90
{{ end }}
---
{{ if eq .Values.environment "prod" }}
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "{{ .Values.service_name }}-pdb-{{ .Values.environment }}"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: "{{ .Values.service_name }}-{{ .Values.environment }}"
{{ end }}
